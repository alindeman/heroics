#
# WARNING: Do not edit by hand, this file was generated by Heroics:
#
#   https://github.com/heroku/heroics
#

require 'uri'

module <%= @module_name %>
  # Get a Client configured to use HTTP Basic authentication.
  #
  # @param username [String] The username to use with the API.
  # @param password [String] The password to use with the API.
  # @param headers [Hash<String,String>] Optionally, custom to headers to
  #   include with every response.
  # @return [Client] A client configured to use the API with HTTP Basic
  #   authentication.
  def self.connect(username, password, headers=nil)
    url = URI.parse("<%= @url %>")
    url.user = username
    url.password = password
    <% if @accept_header %>
    default_headers = {'Accept' => '<%= @accept_header %>'}
    <% else %>
    default_headers = {}
    <% end %>
    unless headers.nil?
      default_headers.merge!(headers)
    end
    options = {options: {default_headers: default_headers}}
    client = Heroics.client_from_schema(SCHEMA, url.to_s, options)
    Client.new(client)
  end

  # Get a Client configured to use OAuth authentication.
  #
  # @param oauth_token [String] The OAuth token to use with the API.
  # @param headers [Hash<String,String>] Optionally, custom to headers to
  #   include with every response.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_oauth(oauth_token, headers=nil)
    url = "<%= @url %>"
    <% if @accept_header %>
    default_headers = {'Accept' => '<%= @accept_header %>'}
    <% else %>
    default_headers = {}
    <% end %>
    unless headers.nil?
      default_headers.merge!(headers)
    end
    options = {options: {default_headers: default_headers}}
    client = Heroics.client_from_schema(oauth_token, SCHEMA, url, options)
    Client.new(client)
  end

  # <%= @description %>
  class Client
    def initialize(client)
      @client = client
    end
    <% for resource in @resources %>

    # <%= resource.description %>
    #
    # @return [<%= resource.class_name %>]
    def <%= resource.name %>
      @<%= resource.name %>_resource ||= <%= resource.class_name %>.new(@client)
    end
    <% end %>
  end

  private
  <% for resource in @resources %>

  # <%= resource.description %>
  class <%= resource.class_name %>
    def initialize(client)
      @client = client
    end
    <% for link in resource.links %>

    # <%= link.description %>
    <% unless link.parameters.empty? %>
    #
    <% for parameter in link.parameters %>
    # @param <%= parameter.name %>: <%= parameter.description %>
    <% end %>
    <% end %>
    def <%= link.name %>(<%= link.parameter_names %>)
      @client.<%= resource.name %>.<%= link.name %>(<%= link.parameter_names %>)
    end
    <% end %>
  end
  <% end %>

  SCHEMA = Heroics::Schema.new(MultiJson.decode(<<-HEROICS_SCHEMA))
<%= @schema %>
HEROICS_SCHEMA
end
