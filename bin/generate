#!/usr/bin/env ruby

require 'erubis'
require 'multi_json'

RESOURCE_TEMPLATE = <<-RESOURCE_TEMPLATE
# WARNING: generated code from heroku/heroics

class Heroics

<%- unless parent_resource_class %>
  def <%= resource_proxy_instance %>(identity=nil)
    if identity
      Heroics::<%= resource_class %>.new(self.<%= resource_proxy_instance %>, 'identity' => identity)
    else
      Heroics::<%= resource_proxy_class %>.new(self)
    end
  end
<%- else %>
  class <%= parent_resource_class %> < Heroics::Resource

    def <%= resource_proxy_instance %>
      Heroics::<%= resource_proxy_class %>.new(self.heroics, '<%= parent_resource_identity %>' => identity)
    end

  end
<%- end %>

  class <%= resource_proxy_class %> < Heroics::ResourceProxy

  <%- definition['links'].select do |link| %>
    <%- ['create', 'instances', 'self'].include?(link['rel']) %>
  <%- end.each do |link| %>
<%= Erubis::Eruby.new(LINK_TEMPLATE).result({key: key, link: link, parent_resource_instance: parent_resource_instance, resource_class: resource_class}) %>
  <%- end %>
  <%- if parent_resource_class %>
    def <%= parent_resource_identity %>
      attributes['<%= parent_resource_identity %>']
    end

  <%- end -%>
  end

  class <%= resource_class %> < Heroics::Resource

  <%- definition['links'].select do |link| %>
    <%- %w{destroy update}.include?(link['rel']) %>
  <%- end.each do |link| %>
<%= Erubis::Eruby.new(LINK_TEMPLATE).result({key: key, link: link, parent_resource_instance: parent_resource_instance, resource_class: resource_class}) %>
  <%- end %>
    def identity
      attributes['identity'] || <%= definition['definitions']['identity']['oneOf'].map {|ref| "attributes['" + ref['$ref'].split('/').last + "']" }.join(' || ') %>
    end

    <%- definition['properties'].keys.each do |key| %>
    def <%= key %>
      attributes['<%= key %>']
    end
    <%- end %>
  end

end
RESOURCE_TEMPLATE

LINK_TEMPLATE = <<-LINK_TEMPLATE
<%- method = link['title'].downcase %>
  <%- if link['rel'] == 'self' && link['href'].include?('identity') %>
    def <%= method %>(identity)
  <%- elsif link.has_key?('schema') %>
    def <%= method %>(new_attributes={})
  <%- else %>
    def <%= method %>
  <% end %>
    <%- path = link['href'].gsub("{(%23%2Fdefinitions%2F\#{key}%2Fdefinitions%2Fidentity)}", '\#{identity}') %>
    <%- if parent_resource_instance %>
      <%- path = path.gsub("{(%23%2Fdefinitions%2F" + parent_resource_instance + "%2Fdefinitions%2Fidentity)}", '\#{resource_proxy.' + parent_resource_instance + '_identity}') %>
    <%- end %>
      response = self.heroics.request(
        <%- if link.has_key?('schema') %>
        <%= "body:   MultiJson.dump(new_attributes)," %>
        <%- end %>
        method: :<%= link['method'].downcase %>,
        path:   "<%= path %>"
      )
      <%- if link['rel'] == 'instances' %>
      response.body.map do |attributes|
        Heroics::<%= resource_class %>.new(self.resource_proxy, attributes)
      end
      <%- else %>
      Heroics::<%= resource_class %>.new(self.resource_proxy, response.body)
      <%- end %>
    end
LINK_TEMPLATE

schema_path = File.expand_path('~/heroku/api/docs/v3/schema.json')
data = MultiJson.load(File.read(schema_path))

data['definitions'].each do |key, value|
  next if value['links'].empty?
  resource_class = key.split('-').map {|k| k[0...1].upcase + k[1..-1]}.join
  resource_instance = key.downcase.split('-').join('_')

  resource_proxy_class = resource_class + 's'
  resource_proxy_instance = resource_instance + 's'

  parent_resource_class, parent_resource_identity, parent_resource_instance = if value['links'].all? {|link| link['href'].include?('{(%23%2Fdefinitions%2Fapp%2Fdefinitions%2Fidentity)}')}
    ['App', 'app_identity', 'app']
  end

  data = Erubis::Eruby.new(RESOURCE_TEMPLATE).result({
    definition:               value,
    key:                      key,
    parent_resource_class:    parent_resource_class,
    parent_resource_identity: parent_resource_identity,
    parent_resource_instance: parent_resource_instance,
    resource_class:           resource_class,
    resource_instance:        resource_instance,
    resource_proxy_class:     resource_proxy_class,
    resource_proxy_instance:  resource_proxy_instance
  })

  path = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'heroics', 'resources', "#{key}.rb"))
  File.open(path, 'w') do |file|
    file.write(data)
  end
end
